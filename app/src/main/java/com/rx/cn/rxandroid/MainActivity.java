package com.rx.cn.rxandroid;import android.os.Bundle;import android.rx.cn.rxandroid.R;import android.support.v7.app.AppCompatActivity;import android.util.Log;import android.view.View;import android.widget.Button;import com.rx.cn.rxandroid.Utils.DataUtils;import com.rx.cn.rxandroid.bean.Student;import java.util.List;import butterknife.BindView;import butterknife.ButterKnife;import rx.Observable;import rx.Observer;import rx.Subscriber;import rx.android.schedulers.AndroidSchedulers;import rx.functions.Action0;import rx.functions.Action1;import rx.functions.Func1;import rx.schedulers.Schedulers;/*** * 参考文章 * https://gank.io/post/560e15be2dca930e00da1083#toc_4 * https://www.jianshu.com/p/eceb6b31d8cb */public class MainActivity extends AppCompatActivity implements View.OnClickListener{    @BindView(R.id.btn_one)    Button btn_one;    @BindView(R.id.btn_two)    Button btn_two;    @BindView(R.id.btn_three)    Button btn_three;    @BindView(R.id.btn_four)    Button btn_four;    @BindView(R.id.btn_five)    Button btn_five;    @BindView(R.id.btn_six)    Button btn_six;    @BindView(R.id.btn_seven)    Button btn_seven;    @BindView(R.id.btn_eight)    Button btn_eight;    @BindView(R.id.btn_filter)    Button btn_filter;    @BindView(R.id.btn_take)    Button btn_take;    @BindView(R.id.btn_skip)    Button btn_skip;    @BindView(R.id.btn_distinct)    Button btn_distinct;    private static final String TAG ="MainActivity" ;    private Subscriber<String> subscriber;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        ButterKnife.bind(this);        btn_one.setOnClickListener(this);        btn_two.setOnClickListener(this);        btn_three.setOnClickListener(this);        btn_four.setOnClickListener(this);        btn_five.setOnClickListener(this);        btn_six.setOnClickListener(this);        btn_seven.setOnClickListener(this);        btn_eight.setOnClickListener(this);        btn_distinct.setOnClickListener(this);        btn_take.setOnClickListener(this);        btn_skip.setOnClickListener(this);        btn_filter.setOnClickListener(this);    }    @Override    public void onClick(View v) {        switch (v.getId()){            case R.id.btn_one://基本实现1                //创建一个Observable对象，同时也是可观察对象                Observable.create(new Observable.OnSubscribe<String>() {                    @Override                    public void call(Subscriber<? super String> subscriber) {                        //onNext可以调用多次                        try {                            subscriber.onNext("Hellow Rxjava");                            subscriber.onNext("Hellow Rxjava");                            //时间序列结束标记                            subscriber.onCompleted();                        }catch (Exception e){                            subscriber.onError(e);                        }                    }                }).subscribe(new Observer<String>() {//被观察者必须指定观察者，整个事件才可以                    @Override                    public void onCompleted() {                        Log.i(TAG,"onCompleted:");                    }                    @Override                    public void onError(Throwable e) {                        Log.i(TAG,"onError:"+e);                    }                    @Override                    public void onNext(String s) {                        Log.i(TAG,"onNext:"+s);                    }                });                break;            case R.id.btn_two://基本实现2                Observable.create(new Observable.OnSubscribe<String>() {                    @Override                    public void call(Subscriber<? super String> subscriber) {                        //onNext可以调用多次                        try {                            subscriber.onNext("Hellow Rxjava");                            subscriber.onNext("Hellow Rxjava");                            subscriber.onNext("Hellow Rxjava");                            subscriber.onNext("Hellow Rxjava");                            //时间序列结束标记                            subscriber.onCompleted();                        }catch (Exception e){                            subscriber.onError(e);                        }                    }                }).subscribe(new Subscriber<String>() {//被观察者必须指定观察者，整个事件才可以                    @Override                    public void onCompleted() {                        Log.i(TAG,"onCompleted:");                    }                    @Override                    public void onError(Throwable e) {                        Log.i(TAG,"onError:"+e);                    }                    @Override                    public void onNext(String s) {                        Log.i(TAG,"onNext:"+s);                    }                });                break;            case R.id.btn_three://just操作符，作用同上，订阅时依次发出三条数据，不过此方法参数可以有1-9条                Observable.just(1,2,3,4,5).subscribe(new Subscriber<Integer>() {                    @Override                    public void onCompleted() {                        Log.i(TAG,"onCompleted:");                    }                    @Override                    public void onError(Throwable e) {                    }                    @Override                    public void onNext(Integer integer) {                        Log.i(TAG,"onNext:"+integer);                    }                });                break;            case R.id.btn_four://form操作符，作用同just不过是把参数封装成数组或者可迭代的集合在依次发送出来，突破了just9个参数的限制                subscriber=new Subscriber<String>() {                    @Override                    public void onCompleted() {                        Log.i(TAG,"onCompleted:");                    }                    @Override                    public void onError(Throwable e) {                    }                    @Override                    public void onNext(String s) {                        Log.i(TAG,"onNext:"+s);                    }                };                Observable.from(new String[]{"url1","url2"}).subscribe(subscriber);                break;            case R.id.btn_five://form操作符                //一个Action实现，call()方法相当于subcribe中onNext()方法                //                Observable.from(new String[]{"AAA","BBB","CCC"}).subscribe(new Action1<String>() {                //                    @Override                //                    public void call(String s) {                //                        Log.i(TAG, "onNext:" + s);                //                //                    }                //                });                //二个Action实现，第一call()方法相当于subcribe中onNext()方法，第二call方法相当于subcribe中的onErro                //                Observable.from(new String[]{"AAA","BBB","CCC"}).subscribe(new Action1<String>() {                //                    @Override                //                    public void call(String s) {                //                        Log.i(TAG, "onNext:" + s);                //                //                    }                //                }, new Action1<Throwable>() {                //                    @Override                //                    public void call(Throwable throwable) {                //                        Log.i(TAG, "onError:" + throwable);                //                //                    }                //                });                // 三个Action实现，第一call()方法相当于subcribe中onNext()方法，第二call方法相当于subcribe中的                Observable.from(new String[]{"AAA","BBB","CCC"}).subscribe(new Action1<String>() {                    @Override                    public void call(String s) {                        Log.i(TAG, "onNext:" + s);                    }                }, new Action1<Throwable>() {                    @Override                    public void call(Throwable throwable) {                        Log.i(TAG, "onError:" + throwable);                    }                }, new Action0() {                    @Override                    public void call() {                        Log.i(TAG, "onCompleted:");                    }                });                break;            case R.id.btn_six:                Observable.just(666).map(new Func1<Integer, String>() {                    @Override                    public String call(Integer integer) {//Integer---->String                        return integer+"";                    }                }).map(new Func1<String, Long>() {                    @Override                    public Long call(String s) {                        return Long.parseLong(s);                    }                }).subscribe(new Action1<Long>() {                    @Override                    public void call(Long aLong) {                        Log.i(TAG,"call:"+aLong);                    }                });                break;            case R.id.btn_seven:                Observable.create(new Observable.OnSubscribe<String>() {                    @Override                    public void call(Subscriber<? super String> subscriber) {                        Log.i(TAG,"call:"+Thread.currentThread().getName());                        subscriber.onNext("AAAAAAA");                        subscriber.onNext("itcast");                        subscriber.onCompleted();                    }                }).subscribeOn(Schedulers.io())//让subscribe的操作执行在异步线程                        .observeOn(AndroidSchedulers.mainThread()).//让订阅者代码运行在主线程                        subscribe(new Subscriber<String>() {                    @Override                    public void onCompleted() {                        Log.i(TAG,"onCompleted");                    }                    @Override                    public void onError(Throwable e) {                    }                    @Override                    public void onNext(String s) {                        Log.i(TAG,"onNext:"+Thread.currentThread().getName());                        Log.i(TAG,"onNext:"+s);                    }                });                break;            case R.id.btn_eight://floatMap操作符                List<Student> students= DataUtils.getStudentList();                Observable.from(students).flatMap(new Func1<Student, Observable<String>>() {                    @Override                    public Observable<String> call(Student student) {                        return Observable.from(student.getCourses());                    }                }).subscribe(new Observer<String>() {                    @Override                    public void onCompleted() {                    }                    @Override                    public void onError(Throwable throwable) {                    }                    @Override                    public void onNext(String s) {                        Log.i("TAG","couseName:"+s.toString());                    }                });                break;            case R.id.btn_filter:                //对发射的数据做一个限制，只有满足条件的数据才会被发射                Observable.just("hello","Rxjava","Nice to meet you").filter(new Func1<String, Boolean>() {                    @Override                    public Boolean call(String s) {                        return s.length()>5;                    }                }).subscribe(new Observer<String>() {                    @Override                    public void onCompleted() {                    }                    @Override                    public void onError(Throwable throwable) {                    }                    @Override                    public void onNext(String s) {                        Log.i("TAG","filter过滤后的数据:"+s.toString());                    }                });                break;            case R.id.btn_distinct://过滤掉重复项                Observable.just("hello","hello","hello","Rxjava","Rxjava","Nice to meet you").filter(new Func1<String, Boolean>() {                    @Override                    public Boolean call(String s) {                        return s.length()>5;                    }                }).subscribe(new Observer<String>() {                    @Override                    public void onCompleted() {                    }                    @Override                    public void onError(Throwable throwable) {                    }                    @Override                    public void onNext(String s) {                        Log.i("TAG","distinct去除重复之后的数据:"+s.toString());                    }                });                break;            case R.id.btn_skip://发射数据时忽略前N项数据（skpiLast忽略后N项数据）                Observable.just("hello","Rxjava","Nice to meet you").skip(2).subscribe(new Observer<String>() {                    @Override                    public void onCompleted() {                    }                    @Override                    public void onError(Throwable throwable) {                    }                    @Override                    public void onNext(String s) {                        Log.i("TAG","Skip之后的数据:"+s.toString());                    }                });                break;            case R.id.btn_take://只发射前N项的数据（takeLast与take想反，只取最后N项数据）                Observable.just("hello","Rxjava","Nice to meet you").take(2).subscribe(new Observer<String>() {                    @Override                    public void onCompleted() {                    }                    @Override                    public void onError(Throwable throwable) {                    }                    @Override                    public void onNext(String s) {                        Log.i("TAG","Take之后的数据:"+s.toString());                    }                });                break;        }    }    @Override    protected void onStop() {        super.onStop();        //解除订阅        if(subscriber!=null&&!subscriber.isUnsubscribed()){            subscriber.unsubscribe();        }    }}